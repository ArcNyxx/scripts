#!/bin/sh
# pswd - password manager
# Copyright (C) 2022 ArcNyxx
# see LICENCE file for licensing information

error() {
	echo "$1" >&2; exit 1
}

write() {
	sort -u | column -t | age -e -p -o "$PSWD"
}

pad() {
	OUT="$1"
	while [ "${#OUT}" -le "$2" ]; do
		OUT="0$OUT"
	done
	echo "$OUT"
}

dterm() {
	GREP="$(echo "$1" | grep "^$2" | column -t)"
	[ -z "$GREP" ] && error "pswd: unable to grep $2 from $PSWD"
	if [ "$(echo "$GREP" | wc -l)" -eq 1 ]; then
		echo "$GREP"
		return
	fi

	echo 'pswd: select a line number to edit'
	ITER='1'
	while read -r LINE; do
		echo "($(pad "$ITER" "$(echo "$GREP" | wc -l)") $LINE"
		ITER=$((ITER + 1))
	done < echo "$GREP"
	read -r LINE
	echo "$GREP" | sed "${LINE}q;d"
}

# make "$PSWD" file if not exists
[ -z "$PSWD" ]   && error 'pswd: $PSWD variable unset'
[ ! -e "$PSWD" ] && touch "$PSWD" 2>/dev/null && age -p "$PSWD"
[ "$?" -ne 0 ]   && error "pswd: unable to create $PSWD"

READ=$(age -d "$PSWD" 2>/dev/null)
[ "$?" -ne 0 ]   && error "pswd: unable to read $PSWD"

if [ -z "$1" ]; then
	echo "$READ"
else
	case "$1" in
		add)
			echo 'pswd: input site, user, and pass'
			read -r SITE
			read -r USER
			read -r PASS
			echo "$READ\n$SITE $USER $PASS" | write
			;;
		rm)
			
			;;
		edit)
			
			;;
	esac
fi
	LINE="$(dterm "$READ" "$1")"
	[ "${#LINE}" -eq 0 ] && error 'pswd: invalid line number'





case $1 in
	add)
		if [ -z "$2" ]; then
			echo "pswd: add [site]"
			exit 1
		fi

		if [ ! -e "${PSWD}pswd.age" ]; then
			echo "pswd: file does not exist: ${PSWD}pswd.age"
			exit 1
		fi

		DATA="$(age -d "${PSWD}pswd.age")"
		if [ -z "$DATA" ]; then
			echo "pswd: unable to read passwords"
			exit 1
		fi

		echo "pswd: enter username"
		read -r USER
		echo "pswd: enter password"
		read -r PASS

		echo -e "$DATA\n$2 $USER $PASS" | sort | column -t | \
			age -e -p -o "${PSWD}pswd.age"
		;;

	rm)
		if [ -z "$2" ]; then
			echo "pswd: rm [line]"
			exit 1
		fi

		if [ ! -e "${PSWD}pswd.age" ]; then
			echo "pswd: file does not exist: ${PSWD}pswd.age"
			exit 1
		fi

		DATA="$(age -d "${PSWD}pswd.age")"
		if [ -z "$DATA" ]; then
			echo "pswd: unable to read passwords"
			exit 1
		fi

		LINE="$(echo "$DATA" | grep "^$2")"
		if [ -z "$LINE" ]; then
			echo "pswd: password not found: $2"
			exit 1
		fi

		echo "$LINE"
		echo "pswd: confirm del line [y/N]"
		read -r CONFIRM
		
		if [ "$CONFIRM" != y ]; then
			echo "pswd: confirm fail"
			exit 0
		fi

		echo "$DATA" | grep -v "^$2" | column -t | \
			age -e -p -o "${PSWD}pswd.age"
		;;
esac
